Using Flipper Zero as testing tool for ANT


let eventLoop = require("event_loop");
let gpio = require("gpio");

// Define GPIO pins for motor control
let IN1 = gpio.get("PA7"); // Motor A direction pin 1
let IN2 = gpio.get("PA6"); // Motor A direction pin 2
let IN3 = gpio.get("PA4"); // Motor B direction pin 1
let IN4 = gpio.get("PB3"); // Motor B direction pin 2
let ENA = gpio.get("PB2"); // Motor A enable pin
let ENB = gpio.get("PC3"); // Motor B enable pin

// Speed variables (use binary on/off control if PWM is unsupported)
let speedA = 0; // Motor A speed
let speedB = 0; // Motor B speed
const MAX_SPEED = 255;
const MIN_SPEED = 0;

// Initialize GPIO pins for the motors
let initializationSuccess = true;

/**
 * Initialize a GPIO pin with optional PWM capability.
 * @param {Object} pin - The GPIO pin object.
 * @param {string} name - The name of the pin for logging.
 * @param {boolean} usePwm - Whether to initialize the pin with PWM capability.
 */
function initializePin(pin, name, usePwm) {
    let options = {}; // Define properties individually for compatibility
    options.direction = "out";
    if (usePwm) {
        options.pwm = true; // Add PWM capability if needed
    }
    if (!pin.init(options)) {
        console.log(name + " pin initialization failed.");
        initializationSuccess = false;
    } else {
        console.log(name + " pin initialized successfully.");
    }
}

// Initialize all direction pins without PWM
initializePin(IN1, "IN1", false);
initializePin(IN2, "IN2", false);
initializePin(IN3, "IN3", false);
initializePin(IN4, "IN4", false);

// Initialize enable pins with PWM if supported
initializePin(ENA, "ENA", true);
initializePin(ENB, "ENB", true);

if (!initializationSuccess) {
    console.log("GPIO pin initialization failed. Check connections.");
}

// Motor control function
function motorControl(direction) {
    // Stop all motors by default
    IN1.write(false);
    IN2.write(false);
    IN3.write(false);
    IN4.write(false);
    gpio.pwmWrite(ENA, 0);
    gpio.pwmWrite(ENB, 0);

    // Set motor directions and speeds
    if (direction === "forward") {
        IN1.write(true);
        IN2.write(false);
        IN3.write(true);
        IN4.write(false);
        gpio.pwmWrite(ENA, speedA);
        gpio.pwmWrite(ENB, speedB);
    } else if (direction === "backward") {
        IN1.write(false);
        IN2.write(true);
        IN3.write(false);
        IN4.write(true);
        gpio.pwmWrite(ENA, speedA);
        gpio.pwmWrite(ENB, speedB);
    } else if (direction === "stop") {
        // Keep motors stopped
    } else {
        console.log("Unknown direction: " + direction);
    }
}

// Subscribe to periodic checks for button states
eventLoop.subscribe(eventLoop.timer("periodic", 50), function () {
    // Control motors based on button states
    if (input.isPressed("left")) {
        motorControl("backward");
    } else if (input.isPressed("right")) {
        motorControl("forward");
    } else {
        motorControl("stop");
    }

    // Adjust speeds based on up/down buttons
    if (input.isPressed("up")) {
        speedA = Math.min(MAX_SPEED, speedA + 5);
        speedB = Math.min(MAX_SPEED, speedB + 5);
        console.log("Speed increased: A=" + speedA + ", B=" + speedB);
    } else if (input.isPressed("down")) {
        speedA = Math.max(MIN_SPEED, speedA - 5);
        speedB = Math.max(MIN_SPEED, speedB - 5);
        console.log("Speed decreased: A=" + speedA + ", B=" + speedB);
    }
});

// Run the event loop continuously
eventLoop.run();

